(define (atomic? expression) 
  (not (pair? expression)))

(define (constant? expression variable)
  (and (atomic? expression)
       (not (eq? expression variable))))

(define (same-variable? expression variable)
  (and (atomic? expression)
       (eq? expression variable)))

(define (sum? expression)
  (and (not (atomic? expression))
       (eq? (car expression) '+)))

(define (make-sum operand1 operand2)
  (list '+ operand1 operand2))

(define (product? expression)
  (and (not (atomic? expression))
       (eq? (car expression) '*)))

(define (make-product operand1 operand2)
  (list '* operand1 operand2))

(define (derivative expression variable)
  (let ((operand1 cadr)
        (operand2 caddr))
    (cond ((constant? expression variable) 0)
          ((same-variable? expression variable) 1)
          ((sum? expression)
           (make-sum (derivative (operand1 expression) variable)
                     (derivative (operand2 expression) variable)))
          ((product? expression)
           (make-sum
             (make-product (operand1 expression)
                           (derivative (operand2 expression) variable))
             (make-product (derivative (operand1 expression) variable)
                           (operand2 expression)))))))

(display "testing the derivative procedure")
(newline)

(define foo
  '(+ (* a (* x x))
      (+ (* b x)
         c)))

(display (derivative foo 'x))
(newline)

(define (make-sum operand1 operand2)
  (cond ((and (number? operand1)
              (number? operand2))
         (+ operand1 operand2))
        ((and (number? operand1)
              (= operand1 0))
         operand2)
        ((and (number? operand2)
              (= operand2 0))
         operand1)
        (else (list '+ operand1 operand2))))

(define (make-product operand1 operand2)
  (cond ((and (number? operand1)
              (number? operand2))
         (* operand1 operand2))
        ((and (number? operand1)
             (= operand1 0))
         0)
        ((and (number? operand1)
              (= operand1 1))
         operand2)
        ((and (number? operand2)
              (= operand2 0))
         0)
        ((and (number? operand2)
              (= operand2 1))
         operand1)
        (else (list '* operand1 operand2))))

(display "With simplifications")
(newline)
(display (derivative foo 'x))
(newline)
(display (derivative foo 'a))
(newline)
(display (derivative foo 'b))
(newline)
(display (derivative foo 'c))
(newline)
